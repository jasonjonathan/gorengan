schema {
    query: Query
    mutation: Mutation
}

type Query {
    product(id: ID!): Product
    products(productsArgs: ProductsArgs): Products
}

type Mutation {
    createCategory(category: CategoryInput!): Category
    createProduct(product: ProductInput!): Product
    deleteProduct(id: ID!): Product
}

scalar Time

input ProductsArgs {
    query: String
    limit: Int
    page: Int
    sort: String
    orderBy: String
}

input ProductInput {
    id: ID!
    name: String!
    quantity: Int!
    category: ID!
    creatorId: String!
    creatorIp: String!
    created: Time
    editorId: String!
    editorIp: String!
    lastModified: Time
    isDeleted: Boolean
    deleted: Time
}

input CategoryInput {
    id: ID!
    name: String!
    creatorId: String!
    creatorIp: String!
    created: Time
    editorId: String!
    editorIp: String!
    lastModified: Time
    isDeleted: Boolean
    deleted: Time
}

type Products {
	products: [Product]!
	meta: Meta
}

type Product {
    id: ID!
    name: String!
    quantity: Int!
    category: Category
    creatorId: String!
    creatorIp: String!
    created: Time
    editorId: String!
    editorIp: String!
    lastModified: Time
    isDeleted: Boolean
    deleted: Time
}

type Category {
    id: ID!
    name: String!
    creatorId: String!
    creatorIp: String!
    created: Time
    editorId: String!
    editorIp: String!
    lastModified: Time
    isDeleted: Boolean
    deleted: Time
}

type Meta {
    page: Int
    limit: Int
    totalRecords: Int
    totalPages: Int
}